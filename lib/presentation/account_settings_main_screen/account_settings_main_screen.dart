import 'bloc/account_settings_main_bloc.dart';import 'models/account_settings_main_model.dart';import 'package:arone_jerome_s_application1/core/app_export.dart';import 'package:arone_jerome_s_application1/presentation/all_friends_page/all_friends_page.dart';import 'package:arone_jerome_s_application1/presentation/discover_page/discover_page.dart';import 'package:arone_jerome_s_application1/presentation/message_main_page/message_main_page.dart';import 'package:arone_jerome_s_application1/presentation/notifications_page/notifications_page.dart';import 'package:arone_jerome_s_application1/widgets/app_bar/appbar_image.dart';import 'package:arone_jerome_s_application1/widgets/app_bar/appbar_subtitle_1.dart';import 'package:arone_jerome_s_application1/widgets/app_bar/custom_app_bar.dart';import 'package:arone_jerome_s_application1/widgets/custom_bottom_bar.dart';import 'package:arone_jerome_s_application1/widgets/custom_text_form_field.dart';import 'package:flutter/material.dart';
// ignore_for_file: must_be_immutable
class AccountSettingsMainScreen extends StatelessWidget {AccountSettingsMainScreen({Key? key}) : super(key: key);

GlobalKey<NavigatorState> navigatorKey = GlobalKey();

static Widget builder(BuildContext context) { return BlocProvider<AccountSettingsMainBloc>(create: (context) => AccountSettingsMainBloc(AccountSettingsMainState(accountSettingsMainModelObj: AccountSettingsMainModel()))..add(AccountSettingsMainInitialEvent()), child: AccountSettingsMainScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(resizeToAvoidBottomInset: false, appBar: CustomAppBar(leadingWidth: 51.h, leading: AppbarImage(svgPath: ImageConstant.imgArrowleft, margin: EdgeInsets.only(left: 20.h, top: 17.v, bottom: 10.v), onTap: () {onTapArrowleftone(context);}), centerTitle: true, title: AppbarSubtitle1(text: "msg_account_settings".tr), styleType: Style.bgFill_1), body: Container(width: double.maxFinite, padding: EdgeInsets.symmetric(horizontal: 30.h, vertical: 15.v), child: Column(children: [BlocSelector<AccountSettingsMainBloc, AccountSettingsMainState, TextEditingController?>(selector: (state) => state.profilevalueController, builder: (context, profilevalueController) {return CustomTextFormField(controller: profilevalueController, hintText: "lbl_profile".tr, hintStyle: theme.textTheme.bodyMedium!, prefix: Container(margin: EdgeInsets.fromLTRB(10.h, 10.v, 24.h, 12.v), child: CustomImageView(svgPath: ImageConstant.imgGetStylinIconsbiodescriptionFirstNameLastName)), prefixConstraints: BoxConstraints(maxHeight: 43.v), contentPadding: EdgeInsets.only(top: 13.v, right: 30.h, bottom: 13.v));}), BlocSelector<AccountSettingsMainBloc, AccountSettingsMainState, TextEditingController?>(selector: (state) => state.notificationsvaController, builder: (context, notificationsvaController) {return CustomTextFormField(controller: notificationsvaController, hintText: "lbl_notifications2".tr, hintStyle: theme.textTheme.bodyMedium!, prefix: Container(margin: EdgeInsets.fromLTRB(9.h, 10.v, 24.h, 11.v), child: CustomImageView(svgPath: ImageConstant.imgGetStylinIconsnotifications)), prefixConstraints: BoxConstraints(maxHeight: 43.v), contentPadding: EdgeInsets.only(top: 13.v, right: 30.h, bottom: 13.v));}), BlocSelector<AccountSettingsMainBloc, AccountSettingsMainState, TextEditingController?>(selector: (state) => state.privacyvalueController, builder: (context, privacyvalueController) {return CustomTextFormField(controller: privacyvalueController, hintText: "lbl_privacy".tr, hintStyle: theme.textTheme.bodyMedium!, prefix: Container(margin: EdgeInsets.fromLTRB(10.h, 11.v, 25.h, 13.v), child: CustomImageView(svgPath: ImageConstant.imgVolume)), prefixConstraints: BoxConstraints(maxHeight: 44.v), contentPadding: EdgeInsets.only(top: 14.v, right: 30.h, bottom: 14.v));}), BlocSelector<AccountSettingsMainBloc, AccountSettingsMainState, TextEditingController?>(selector: (state) => state.securityvalueController, builder: (context, securityvalueController) {return CustomTextFormField(controller: securityvalueController, hintText: "lbl_security".tr, hintStyle: theme.textTheme.bodyMedium!, prefix: Container(margin: EdgeInsets.fromLTRB(10.h, 10.v, 25.h, 13.v), child: CustomImageView(svgPath: ImageConstant.imgGetStylinIconsaccountPrivacy)), prefixConstraints: BoxConstraints(maxHeight: 44.v), contentPadding: EdgeInsets.only(top: 14.v, right: 30.h, bottom: 14.v));}), SizedBox(height: 5.v), BlocSelector<AccountSettingsMainBloc, AccountSettingsMainState, TextEditingController?>(selector: (state) => state.aboutvalueoneController, builder: (context, aboutvalueoneController) {return CustomTextFormField(controller: aboutvalueoneController, hintText: "lbl_about".tr, hintStyle: theme.textTheme.bodyMedium!, textInputAction: TextInputAction.done, prefix: Container(margin: EdgeInsets.fromLTRB(9.h, 11.v, 26.h, 12.v), child: CustomImageView(svgPath: ImageConstant.imgGetStylinIconsabout)), prefixConstraints: BoxConstraints(maxHeight: 44.v), contentPadding: EdgeInsets.only(top: 14.v, right: 30.h, bottom: 14.v));})])), bottomNavigationBar: CustomBottomBar(onChanged: (BottomBarEnum type) {Navigator.pushNamed(navigatorKey.currentContext!, getCurrentRoute(type));}))); } 
///Handling route based on bottom click actions
String getCurrentRoute(BottomBarEnum type) { switch (type) {case BottomBarEnum.Dashboard: return AppRoutes.notificationsPage; case BottomBarEnum.Mystylin: return AppRoutes.allFriendsPage; case BottomBarEnum.Upload: return "/"; case BottomBarEnum.Messages: return AppRoutes.messageMainPage; case BottomBarEnum.Discover: return AppRoutes.discoverPage; default: return "/";} } 
///Handling page based on route
Widget getCurrentPage(BuildContext context, String currentRoute, ) { switch (currentRoute) {case AppRoutes.notificationsPage: return NotificationsPage.builder(context); case AppRoutes.allFriendsPage: return AllFriendsPage.builder(context); case AppRoutes.messageMainPage: return MessageMainPage.builder(context); case AppRoutes.discoverPage: return DiscoverPage.builder(context); default: return DefaultWidget();} } 


/// Navigates to the previous screen.
///
/// This function takes a [BuildContext] object as a parameter, which is
/// used to build the navigation stack. When the action is triggered, this
/// function uses the [NavigatorService] to navigate to the previous screen
/// in the navigation stack.
onTapArrowleftone(BuildContext context) { NavigatorService.goBack(); } 
 }
